// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/consesnuscraft.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsensusCraftService_RegisterNode_FullMethodName = "/consensuscraft.ConsensusCraftService/RegisterNode"
	ConsensusCraftService_Inventories_FullMethodName  = "/consensuscraft.ConsensusCraftService/Inventories"
)

// ConsensusCraftServiceClient is the client API for ConsensusCraftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsensusCraftServiceClient interface {
	// Register a node with address, pubkey and signature, returns database data
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DatabaseEntry], error)
	// Bidirectional stream for inventory updates between nodes
	Inventories(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InventoryMessage, InventoryMessage], error)
}

type consensusCraftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsensusCraftServiceClient(cc grpc.ClientConnInterface) ConsensusCraftServiceClient {
	return &consensusCraftServiceClient{cc}
}

func (c *consensusCraftServiceClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DatabaseEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConsensusCraftService_ServiceDesc.Streams[0], ConsensusCraftService_RegisterNode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterNodeRequest, DatabaseEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConsensusCraftService_RegisterNodeClient = grpc.ServerStreamingClient[DatabaseEntry]

func (c *consensusCraftServiceClient) Inventories(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InventoryMessage, InventoryMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConsensusCraftService_ServiceDesc.Streams[1], ConsensusCraftService_Inventories_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InventoryMessage, InventoryMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConsensusCraftService_InventoriesClient = grpc.BidiStreamingClient[InventoryMessage, InventoryMessage]

// ConsensusCraftServiceServer is the server API for ConsensusCraftService service.
// All implementations must embed UnimplementedConsensusCraftServiceServer
// for forward compatibility.
type ConsensusCraftServiceServer interface {
	// Register a node with address, pubkey and signature, returns database data
	RegisterNode(*RegisterNodeRequest, grpc.ServerStreamingServer[DatabaseEntry]) error
	// Bidirectional stream for inventory updates between nodes
	Inventories(grpc.BidiStreamingServer[InventoryMessage, InventoryMessage]) error
	mustEmbedUnimplementedConsensusCraftServiceServer()
}

// UnimplementedConsensusCraftServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsensusCraftServiceServer struct{}

func (UnimplementedConsensusCraftServiceServer) RegisterNode(*RegisterNodeRequest, grpc.ServerStreamingServer[DatabaseEntry]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedConsensusCraftServiceServer) Inventories(grpc.BidiStreamingServer[InventoryMessage, InventoryMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Inventories not implemented")
}
func (UnimplementedConsensusCraftServiceServer) mustEmbedUnimplementedConsensusCraftServiceServer() {}
func (UnimplementedConsensusCraftServiceServer) testEmbeddedByValue()                               {}

// UnsafeConsensusCraftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsensusCraftServiceServer will
// result in compilation errors.
type UnsafeConsensusCraftServiceServer interface {
	mustEmbedUnimplementedConsensusCraftServiceServer()
}

func RegisterConsensusCraftServiceServer(s grpc.ServiceRegistrar, srv ConsensusCraftServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsensusCraftServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsensusCraftService_ServiceDesc, srv)
}

func _ConsensusCraftService_RegisterNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterNodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsensusCraftServiceServer).RegisterNode(m, &grpc.GenericServerStream[RegisterNodeRequest, DatabaseEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConsensusCraftService_RegisterNodeServer = grpc.ServerStreamingServer[DatabaseEntry]

func _ConsensusCraftService_Inventories_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConsensusCraftServiceServer).Inventories(&grpc.GenericServerStream[InventoryMessage, InventoryMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConsensusCraftService_InventoriesServer = grpc.BidiStreamingServer[InventoryMessage, InventoryMessage]

// ConsensusCraftService_ServiceDesc is the grpc.ServiceDesc for ConsensusCraftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsensusCraftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consensuscraft.ConsensusCraftService",
	HandlerType: (*ConsensusCraftServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterNode",
			Handler:       _ConsensusCraftService_RegisterNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Inventories",
			Handler:       _ConsensusCraftService_Inventories_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/consesnuscraft.proto",
}
